#!/usr/bin/env python3

'''
Required packages -

python3
opencv (and python bindings)
numpy

'''

import cv2 as cv
import numpy as np

video_capture = cv.VideoCapture(0)  # 0 - Default camera


def make_gauss(centre, amp, sig, shapdim):

    '''just makes a Gaussian centred on chosen coordinates to
    use as the grav potential in the field'''

    sidelenx = shapdim[1]
    sideleny = shapdim[0]
    l = np.zeros(shapdim)

    for i in range(0, sideleny):

        for j in range(0, sidelenx):

            l[i, j] = np.sqrt((centre[0]-i)**2+(centre[1]-j)**2)

    gaussblob = amp*np.exp(-(l**2)/sig)
    return gaussblob


ret, frame = video_capture.read()
frame = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
rows, cols = frame.shape
# gauss = make_gauss((rows/2, cols/2), 5000, 1500, (rows, cols))
gauss = make_gauss((rows/2, cols/2), 15000, 5000, (rows, cols))
gauss += make_gauss((rows/1.09, cols/2.3), 15000, 5000, (rows, cols))
gauss += make_gauss((rows/1.3, cols/9), 15000, 5000, (rows, cols))
grad = np.gradient(gauss)
g=0
newxpos=np.zeros(frame.shape[1]*frame.shape[0], dtype=int)
newypos=np.zeros(frame.shape[1]*frame.shape[0], dtype=int)
for i in range(0, frame.shape[0]):
    for j in range(0, frame.shape[1]):

        # frame[i, j, 0] = frame[(i-int(grad[0][i][j])) % frame.shape[0], (j-int(grad[1][i][j])) % frame.shape[1], 0]
        # frame[i, j, 1] = frame[(i-int(grad[0][i][j])) % frame.shape[0], (j-int(grad[1][i][j])) % frame.shape[1], 1]
        # frame[i, j, 2] = frame[(i-int(grad[0][i][j])) % frame.shape[0], (j-int(grad[1][i][j])) % frame.shape[1], 2]
        newxpos[g]=i-int(grad[0][i][j]) % frame.shape[0]
        newypos[g]=j-int(grad[1][i][j]) % frame.shape[1]
        g=g+1

transpos=(newxpos, newypos)
lensim=frame[transpos]
lensim = np.reshape(lensim, frame.shape)

# lensim[1]=frame[transpos, 1]
# lensim[2]=frame[transpos, 2]


while True:
    # Capture frame-by-frame
    ret, frame = video_capture.read()
    frame = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    # Lensing

    # imagel = np.zeros(frame.shape, np.float32)

#    for i in range(0, frame.shape[0]):
#
#        for j in range(0, frame.shape[1]):
#
#            frame[i, j, 0] = frame[(i-int(grad[0][i][j])) % frame.shape[0], (j-int(grad[1][i][j])) % frame.shape[1], 0]
#            frame[i, j, 1] = frame[(i-int(grad[0][i][j])) % frame.shape[0], (j-int(grad[1][i][j])) % frame.shape[1], 1]
#            frame[i, j, 2] = frame[(i-int(grad[0][i][j])) % frame.shape[0], (j-int(grad[1][i][j])) % frame.shape[1], 2]

    # Display the resulting frame
    lensim=frame[transpos]
    lensim = np.reshape(lensim, frame.shape)
    result = cv.flip(lensim, 1)
    cv.imshow('Video', result)

    if cv.waitKey(1) & 0xFF == ord('q'):
        break

# When everything is done, release the capture
video_capture.release()
cv.destroyAllWindows()
