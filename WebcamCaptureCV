#!/usr/bin/env python3

'''
Required packages -

python3
opencv (and python bindings)
numpy

'''

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

video_capture = cv.VideoCapture(0)  # 0 - Default camera


def make_gauss(centre, amp, sig, shapdim):

    '''just makes a Gaussian centred on chosen coordinates to
    use as the grav potential in the field'''

    sidelenx = shapdim[1]
    sideleny = shapdim[0]
    l = np.zeros(shapdim)

    for i in range(0, sideleny):

        for j in range(0, sidelenx):

            l[i, j] = np.sqrt((centre[0]-i)**2+(centre[1]-j)**2)

    gaussblob = amp*np.exp(-(l**2)/sig)
    return gaussblob


ret, frame = video_capture.read()
rows, cols, ch = frame.shape
gauss = make_gauss((rows/2, cols/2), 10, 1e10, (rows, cols))
grad = np.gradient(gauss)
# print(grad)

while True:
    # Capture frame-by-frame
    ret, frame = video_capture.read()

    rows, cols, ch = frame.shape

    # Lensing

    imagel = np.zeros(frame.shape)

    for i in range(0, frame.shape[0]):

        for j in range(0, frame.shape[1]):

            if ((i-int(grad[0][i][j])) < 0):

                frame[i, j] = 0

            elif ((i-int(grad[0][i][j])) > frame.shape[0]-1):

                frame[i, j] = 0

            elif ((j-int(grad[1][i][j])) < 0):

                frame[i, j] = 0

            elif ((j-int(grad[1][i][j])) > frame.shape[1]-1):

                frame[i, j] = 0

            else:
                imagel[i, j, 0] = frame[i-int(grad[0][i][j]), j-int(grad[1][i][j]), 0]
                # print(frame[i-int(grad[0][i][j]), j-int(grad[1][i][j]), 0])
                imagel[i, j, 1] = frame[i-int(grad[0][i][j]), j-int(grad[1][i][j]), 1]
                imagel[i, j, 2] = frame[i-int(grad[0][i][j]), j-int(grad[1][i][j]), 2]

    # Example tranformation - can do any sort of matrix transform here

    # pts1 = np.float32([[cols/3.0, 65], [cols, rows/1.5], [28, rows], [cols, rows]])
    # pts2 = np.float32([[0, 0], [cols, 0], [0, rows], [cols, rows]])
    #
    # M = cv.getPerspectiveTransform(pts1, pts2)
    #
    # dst = cv.warpPerspective(frame, M, (cols, rows))

    print(imagel)

    plt.imshow(imagel)
    plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
    plt.show()

    # Display the resulting frame
    # cv.imshow('Video', imagel)

    if cv.waitKey(1) & 0xFF == ord('q'):
        break

# When everything is done, release the capture
video_capture.release()
cv.destroyAllWindows()
