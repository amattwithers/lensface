#!/usr/bin/env python3

'''
Required packages -

python3
opencv (and python bindings)
numpy

'''

import cv2 as cv
import numpy as np
from numba import jit

video_capture = cv.VideoCapture(0)  # 0 - Default camera


def make_gauss(centre, amp, sig, shapdim):

    '''just makes a Gaussian centred on chosen coordinates to
    use as the grav potential in the field'''

    sidelenx = shapdim[1]
    sideleny = shapdim[0]
    l = np.zeros(shapdim)

    for i in range(0, sideleny):

        for j in range(0, sidelenx):

            l[i, j] = np.sqrt((centre[0]-i)**2+(centre[1]-j)**2)

    gaussblob = amp*np.exp(-(l**2)/sig)
    return gaussblob


ret, frame = video_capture.read()
frame = cv.resize(frame, (0, 0), fx=0.5, fy=0.5)
rows, cols, ch = frame.shape
gauss = make_gauss((rows/2, cols/2), 2000, 750, (rows, cols))
grad = np.gradient(gauss)


@jit(cache=True)
def tranform(image, grad, lenx, leny):

    for i in range(0, lenx):

        for j in range(0, leny):

            image[i, j, 0] = image[(i-int(grad[0][i][j])) % lenx, (j-int(grad[1][i][j])) % leny, 0]
            image[i, j, 1] = image[(i-int(grad[0][i][j])) % lenx, (j-int(grad[1][i][j])) % leny, 1]
            image[i, j, 2] = image[(i-int(grad[0][i][j])) % lenx, (j-int(grad[1][i][j])) % leny, 2]

    return image


while True:
    # Capture frame-by-frame
    ret, frame = video_capture.read()
    frame = cv.resize(frame, (0, 0), fx=0.5, fy=0.5)
    # Lensing

    # imagel = np.zeros(frame.shape, np.float32)

    # Display the resulting frame
    result = tranform(frame, grad, rows, cols)
    result = cv.resize(result, (0, 0), fx=2.0, fy=2.0)
    result = cv.flip(result, 1)
    cv.imshow('Video', result)

    if cv.waitKey(1) & 0xFF == ord('q'):
        break

# When everything is done, release the capture
video_capture.release()
cv.destroyAllWindows()
